#!/reg/g/pcds/pyps/conda/py36/envs/pcds-4.1.6/bin/python


"""
Beamline motors Report
This script helps the engineers and scientists to know
if the beamline motors have a configuration saved in the
parameter manager.

The script will generate a report for:
1. The IMS motors with their rela PV name.
2. The current configuration on it.
3. If the current configuration matches or not with the
appropriate values.
"""
import os
import argparse
import ophyd.signal
from pmgr import pmgrAPI
from prettytable import PrettyTable

PYPS_ROOT = os.getenv("PYPS_ROOT", "/cds/group/pcds/pyps")
HOST_DIR = "%s/config/.host" % os.getenv("PYPS_ROOT")
CONFIG_DIR = "%s/config/" % os.getenv("PYPS_ROOT")
CONFIG_FILE = "%s/config/%%s/iocmanager.cfg" % os.getenv("PYPS_ROOT")


def main():
    parser = argparse.ArgumentParser(
        description=(
            "Checks for the IMS motor's  configuration, name, and "
            "mismatches."
        )
    )
    parser.add_argument('hutch_name', help='The hutch name in lowercase'
                        ' e.g xpp', type=str)
    parser.add_argument('-n', '--noconf', action='store_true',
                        help='Displays motors with no configuration.')
    parser.add_argument('-m', '--match', action='store_true',
                        help='Displays the motors with configuration'
                             ' not matching.')
    parser.add_argument('-f', '--found', action='store_true',
                        help='Displays the motors with not'
                        'found real PV name.')
    parser.add_argument('-a', '--aliasconf', action='store_true',
                        help='Displays alias motors with directly'
                              ' assigned configuration.')
    parser.add_argument('-t', '--total', action='store_true',
                        help='Displays all the information'
                        ' of the IMS motors.')

    args = parser.parse_args()
    cfg = args.hutch_name.lower()
    arg_no_conf = args.noconf
    arg_match = args.match
    arg_found = args.found
    args_alias_conf = args.aliasconf
    args_total = args.total

    config = read_configuration(cfg)
    ioc_names = find_ioc_names(config)
    lists_path = assign_full_path(ioc_names)
    motors, motors_name = create_list_motors(lists_path)
    total_info = motors_information(motors, motors_name, cfg)
    display_information(total_info, arg_no_conf, arg_match,
                        arg_found, args_alias_conf, args_total, cfg)


def read_configuration(cfg):
    """
    This Function read the information from the IOC manager,
    and creates a dictionary with the informartion.
    """
    config = {'procmgr_config': None, 'hosts': None, 'dir': 'dir',
              'id': 'id', 'cmd': 'cmd', 'flags': 'flags', 'port': 'port',
              'host': 'host', 'disable': 'disable', 'history': 'history',
              'delay': 'delay', 'alias': 'alias', 'hard': 'hard'}
    vs = set(config.keys())

    cfgfn = CONFIG_FILE % cfg
    try:
        f = open(cfgfn, "r")
    except open.CanNotOpenFile:
        print("Cannot open file %s!" % cfgfn)
        return None
    try:
        exec(f.read(), {}, config)
        newvars = set(config.keys()).difference(vs)
        vdict = {}
        for v in newvars:
            vdict[v] = config[v]
        res = (0, config['procmgr_config'], config['hosts'], vdict)
    except exec.FailureExec:
        print("Failure to exec?")
        res = None
    f.close()
    if res is None:
        return None
    for lin in res[1]:
        if 'disable'not in lin.keys():
            lin['disable'] = False
        if 'hard'not in lin.keys():
            lin['hard'] = False
        if 'history' not in lin.keys():
            lin['history'] = []
        if 'alias' not in lin.keys():
            lin['alias'] = ""
        if lin['hard']:
            lin['base'] = ""
            lin['dir'] = ""
            lin['host'] = lin['id']
            lin['port'] = -1
            lin['rhost'] = lin['id']
            lin['rport'] = -1
            lin['rdir'] = lin['dir']
            lin['newstyle'] = False
        else:
            lin['rid'] = lin['id']
            lin['rdir'] = lin['dir']
            lin['rhost'] = lin['host']
            lin['rport'] = lin['port']
            lin['newstyle'] = False
    return config


def find_ioc_names(config):
    """
    This function takes the list of lists 'procmgr_config'
    from the dictitonary 'config' and searchs for the IMS motors.
    Then stores the ioc name of them into a list.
    """
    ioc_names = []
    for ioc_info in config['procmgr_config']:
        if '/ims/' in ioc_info['dir'] and not ioc_info['disable']:
            ioc_names.append(ioc_info['id'])
    return ioc_names


def assign_full_path(ioc_names):
    """
    This function creates a list with the pathname
    for each ims motor's id from the list 'listId'
    """
    lists_path = []
    for name in range(len(ioc_names)):
        lists_path.append('/reg/d/iocData/' + ioc_names[name] +
                          '/iocInfo/IOC.pvlist')
    return lists_path


def create_list_motors(lists_path):
    """
    This function iterates through the lists_path, opening
    each IOC.pvlist file to collect all the records (aliases)
    with the IMS tag. Then it will store them in a list.
    """
    motors = []
    motors_name = []
    for path in range(len(lists_path)):
        filename = lists_path[path]
        with open(filename, 'r') as file:
            for line in file:
                comma = line.find(',')
                if "ims" in line:
                    motors.append(line[0:comma])
                    motors_name.append(line[0:comma] + '.NAME')
    return motors, motors_name


def motors_information(motors, motors_name, cfg):
    """
    This function finds the real Pv name for each
    record (alias), the cconfiguration name, and if
    that configuration does matches or ot with the
    actual configuration. Then it will create a list
    per each record and finally it will be addes to
    another list.
    """

    parameter_manager = pmgrAPI.pmgrAPI("ims_motor", cfg)
    total_info = []
    for motor in range(len(motors)):
        info_per_record = []
        try:
            real_pv_name = ophyd.signal.EpicsSignal(motors_name[motor]).get()
            try:
                motor_conf = parameter_manager.get_config(motors[motor])
                diff_config = parameter_manager.diff_config(motors[motor])
                if diff_config:
                    info_per_record.append(motors[motor])
                    info_per_record.append(real_pv_name)
                    info_per_record.append(motor_conf)
                    info_per_record.append("No")
                else:
                    info_per_record.append(motors[motor])
                    info_per_record.append(real_pv_name)
                    info_per_record.append(motor_conf)
                    info_per_record.append("Yes")

            except Exception:
                info_per_record.append(motors[motor])
                info_per_record.append(real_pv_name)
                info_per_record.append("None")
                info_per_record.append(" ")
        except Exception:
            info_per_record.append(motors[motor])
            info_per_record.append("Not found!")
            info_per_record.append(" ")
            info_per_record.append(" ")
        total_info.append(info_per_record)
    return total_info


def display_information(total_info, arg_no_conf, arg_match,
                        arg_found, args_alias_conf, args_total, cfg):
    """
    This function displays in a table the information
    of all the ims motors by selection of the user.
    """
    no_configuration = [info for info in total_info if info[0] == info[1]
                        and info[2] == "None"]
    no_match_configuration = [info for info in total_info if info[3] == "No"]
    no_found = [info for info in total_info if info[1] == "Not found!"]
    alias_configured = [info for info in total_info if info[0] != info[1]
                        and info[1] != "Not found!" and info[2] != "None"
                        and info[2] != " "]

    if arg_no_conf:
        if no_configuration:
            print('Motors with no Configuration')
            sorted_list_no_conf = sorted(no_configuration, key=lambda x: x[1])
            table_no_conf = PrettyTable()
            table_no_conf.field_names = ["Record Name", "Pv Name",
                                         "Configuration",
                                         "Configuration Matches"]
            table_no_conf.add_rows(sorted_list_no_conf)
            print(table_no_conf)
        else:
            print('The IMS motors have a configuration or/and',
                  ' the IMS motors were not found!')

    if arg_match:
        if no_match_configuration:
            print('Motors with no Matching Configuration')
            sorted_list_no_match_conf = sorted(no_match_configuration,
                                               key=lambda x: x[1])
            table_no_match = PrettyTable()
            table_no_match.field_names = ["Record Name", "Pv Name",
                                          "Configuration",
                                          "Configuration Matches"]
            table_no_match.add_rows(sorted_list_no_match_conf)
            print(table_no_match)
        else:
            conf_matching = [conf for conf in no_match_configuration
                             if conf[3] == "Yes"]
            print(len(conf_matching))
            print(len(no_match_configuration))
            if len(conf_matching) == len(no_match_configuration):
                print('The IMS motors have a matching configuration!')
            else:
                print('The IMS motors have a matching configuration or/and',
                      ' the IMS motors do not have configuration')
    if arg_found:
        if no_found:
            print('Motors not found!')
            sorted_list_no_found = sorted(no_found, key=lambda x: x[1])
            table_no_found = PrettyTable()
            table_no_found.field_names = ["Record Name", "Pv Name",
                                          "Configuration",
                                          "Configuration Matches"]
            table_no_found.add_rows(sorted_list_no_found)
            print(table_no_found)
        else:
            print('All the IMS motors were found in the system')

    if args_alias_conf:
        if alias_configured:
            print('Alias with configuration assigned')
            sorted_list_alias_conf = sorted(alias_configured,
                                            key=lambda x: x[1])
            table_alias_conf = PrettyTable()
            table_alias_conf.field_names = ["Record Name", "Pv Name",
                                            "Configuration",
                                            "Configuration Matches"]
            table_alias_conf.add_rows(sorted_list_alias_conf)
            print(table_alias_conf)
        else:
            print('There are no alias motors with configuration assigned.')
    if args_total:
        print('Total information of the IMS motors in the HUTCH', cfg)
        sorted_list_total_info = sorted(total_info, key=lambda x: x[1])
        table_total_info = PrettyTable()
        table_total_info.field_names = ["Record Name", "Pv Name",
                                        "Configuration",
                                        "Configuration Matches"]
        table_total_info.add_rows(sorted_list_total_info)
        print(table_total_info)


if __name__ == "__main__":
    main()
