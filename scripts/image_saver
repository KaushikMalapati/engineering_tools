#!/usr/bin/env python
from argparse import ArgumentParser
from subprocess import getoutput
from time import time, sleep
import os
from hutch_python.cam_load import interpret_lines, build_cam
from functools import partial
from hdf5_to_gif import convert


def take_images(camera, num_images, path, filename):
    """
    Takes and saves images in hdf5 format.

    Uses the hdf51 plugin of camera to take num_images images and
    save them in an hdf5 file at the specified path with the
    as filename if it not empty; if it is empty, it will be saved
    {camera.name}-{timestamp}. Based on CamH5.collect from
    /reg/g/pcds/pyps/apps/hutch-python/rix/rix/cam_to_file.py.

    Parameters
    ----------
    camera: pcdsdevices.areadetector.detectors.PCDSAreaDetector
        The actual camera object containing the hdf51 plugin used to
        collect and save images. Created by build_cam in cam_load.
    num_images: int
        The number of images to take.
    path: string
        Path where the hdf5 file containing the images should be saved to.
    filename: string
        Name of hdf5 file images are saved in. Timestamp will be appended
        to ensure all captures have unique filenames.
    """
    # Creating callbacks to know when collecting/saving images is complete
    collecting = False
    writing = False
    # Getting start time for callbacks and appending to filename
    start_time = time()
    filename += "-" + str(int(start_time))

    def _collecting_cb(value, old_value, timestamp, **kwargs):
        """Get a callback for collecting changes"""
        nonlocal collecting
        if timestamp > start_time and old_value == 1:
            collecting = value

    def _writing_cb(value, old_value, timestamp, **kwargs):
        """Get a callback when writing changes"""
        nonlocal writing
        if timestamp > start_time and old_value == 1:
            writing = value

    # Start collecting and saving
    collect_uid = camera.hdf51.capture.subscribe(_collecting_cb)
    write_uid = camera.hdf51.write_file.subscribe(_writing_cb)

    # Setting up hdf51 plugin
    camera.hdf51.file_path.put(path)
    camera.hdf51.file_name.put(filename)
    camera.hdf51.file_template.put('%s%s.h5')
    camera.hdf51.num_capture.put(num_images)
    camera.hdf51.auto_save.put(True)
    camera.hdf51.file_write_mode.put('Capture')
    camera.hdf51.enable.put('Enabled')
    camera.hdf51.capture.put('Capture')
    collecting = True
    writing = True
    # Clean up subscribers when finished
    while collecting and camera.hdf51.num_captured.get() < num_images:
        sleep(0.1)
    camera.hdf51.capture.unsubscribe(collect_uid)
    while writing:
        sleep(0.1)
    camera.hdf51.write_file.unsubscribe(write_uid)
    # Cleaning up plugin
    camera.hdf51.enable.put('Disabled')
    camera.hdf51.file_path.put('')
    camera.hdf51.file_name.put('')
    camera.hdf51.file_template.put('')
    camera.hdf51.num_capture.put(0)
    filepath = path + filename + ".h5"
    print(f"Took {num_images} pictures with {camera.name}, "
          f"saved to {filepath}")
    return filepath


def load_camera(hutch, cam_name):
    """
    Creates camera object.

    Gets camera details based on name and hutch-specific
    camviewer config file and uses build_cam to create an
    individual camera object. Will raise an exception if
    the config file or the camera cannot be found.

    Parameters
    ----------
    hutch: string
        Name of hutch the camera is in, needed to find and
        load the correct config file.
    cam_name: string
        Name of camera to load.

    Returns
    -------
    camera: pcdsdevices.areadetector.detectors.PCDSAreaDetector
        Camera object created by build_cam with hdf51 plugin
        member to take and save images.
    """
    # Get config for cam_name
    with open(f'/reg/g/pcds/pyps/config/{hutch}/camviewer.cfg', 'r') as f:
        lines = f.readlines()
    # Get camera name
    cam_line = [line for line in lines if cam_name.upper() in line]
    if not cam_line:
        raise ValueError('Did not find camera in camera config file, '
                         f'/reg/g/pcds/pyps/config/{hutch}/camviewer.cfg, '
                         'check spelling of camera argument.')
    # Make camera
    cam_info = interpret_lines(cam_line)
    camera = build_cam(*cam_info[0])
    return camera


def button_gui(cameras, num_images, path, filenames, hutch, filename_prefix):
    """
    Takes pictures by clicking a button.

    Creates a pyqt window with a button that, when pressed, will take images
    according to the arguments passed. The button can be pressed an arbitrary
    number of time to take a series of images whenever desired using the
    specified args. A timestamp will be appended to the filename every press
    so that hdf5 files have unique names and do not overwrite each other. In
    the gui, num_images and the text of each button can be also be changed.
    The details of every capture will be printed to the terminal. A button will
    be green and unpressable while capturing.

    Parameters
    ----------
    camera: pcdsdevices.areadetector.detectors.PCDSAreaDetector
        The actual camera object containing the hdf51 plugin used to
        collect and save images. Created by build_cam in cam_load.
    num_images: int
        The number of images to take.
    path: string
        Path where the hdf5 file containing the images should be saved to.
    filename: string
        Name of hdf5 file images are saved in. A timestamp will be appended
        to ensure all captures have unique filenames.
    hutch: string
        Name of hutch that cameras are in; used to edit/add cameras.
    filename_prefix: string
        Prefix to append to filenames; used to edit/add cameras.
    """
    from qtpy.QtWidgets import (QApplication, QWidget, QGridLayout,
                                QPushButton, QLineEdit, QLabel, QHBoxLayout,
                                QInputDialog)
    from qtpy.QtGui import QIntValidator
    from qtpy.QtCore import Qt
    app = QApplication([])
    window = QWidget()
    window.setWindowTitle("Imager")
    main_layout = QGridLayout()
    window.setLayout(main_layout)
    # Show save dir
    dir_label = QLabel()
    dir_label.setFixedHeight(25)
    dir_label.setText(f'Save dir: {path}')
    main_layout.addWidget(dir_label, 0, 0, 1, -1, Qt.AlignCenter)
    # Text box to change num_images
    num_layout = QHBoxLayout()
    main_layout.addLayout(num_layout, 1, 0, 1, -1, Qt.AlignCenter)
    num_label = QLabel()
    num_label.setFixedSize(80, 25)
    num_label.setText("Num. Images")
    num_layout.addWidget(num_label, Qt.AlignRight)
    num_setter = QLineEdit()
    num_setter.setText(str(num_images))
    num_setter.setValidator(QIntValidator())
    num_setter.setMaxLength(3)
    num_setter.setFixedSize(30, 25)

    def set_num(text):
        """Change number of images to take"""
        try:
            new_num = int(text)
        except ValueError:
            # '' or '-'
            return
        nonlocal num_images
        if new_num > 0:
            num_images = new_num
        else:
            print("Num. Images must be positive.")
    num_setter.textEdited.connect(set_num)
    num_layout.addWidget(num_setter, Qt.AlignLeft)
    # Ensure there is a gifs folder in home
    save_dir = os.path.expanduser("~") + "/gifs/"
    if not os.path.exists(save_dir):
        os.mkdir(save_dir)

    def pressed(button, camera, filename):
        """Call take_images and reset button background color when finished"""
        filepath = take_images(camera, num_images, path, filename)
        convert(filepath, save_dir=save_dir)
        print(f"Gif saved to {filepath}.")
        button.clearFocus()

    def change_cam(button):
        text, ok = QInputDialog.getText(None, 'Change Camera', 'New Camera',
                                        text=button.text())
        if ok:
            button.setText(text)
            new_camera = load_camera(hutch, text)
            filename = filename_prefix + text
            button.clicked.disconnect()
            button.clicked.connect(partial(pressed, button,
                                           new_camera, filename))

    def add_row(camera, filename, row):
        name = camera.name
        button = QPushButton(name)
        button.setFixedSize(125, 50)
        button.clicked.connect(partial(pressed, button, camera, filename))
        # Make button green when pressed
        button.setStyleSheet("QPushButton::focus"
                             "{"
                             "background-color : lightgreen;"
                             "}")
        main_layout.addWidget(button, row, 0, 1, -1, Qt.AlignCenter)
        cam_changer = QPushButton('...')
        cam_changer.setFixedSize(30, 30)
        cam_changer.clicked.connect(partial(change_cam, button))
        main_layout.addWidget(cam_changer, row, 1)
    # Add buttons to take images and change cameras
    for row, (camera, filename) in enumerate(zip(cameras, filenames), 2):
        add_row(camera, filename, row)
    # Button to add more cameras
    add_cam_button = QPushButton('+')
    add_cam_button.setFixedSize(40, 40)

    def add_camera():
        text, ok = QInputDialog.getText(None, 'Add Camera', 'New Camera')
        if ok:
            new_camera = load_camera(hutch, text)
            filename = filename_prefix + text
            add_row(new_camera, filename, main_layout.rowCount() + 1)
    add_cam_button.clicked.connect(add_camera)
    main_layout.addWidget(add_cam_button, 1, 2)
    # Open gui
    window.show()
    app.exec_()


if __name__ == '__main__':
    # Arguments
    parser = ArgumentParser(usage='This script requires pcds_conda, '
                            'please source it before running.')
    parser.add_argument("-c", "--cam", help="name of camera(s)",
                        required=True, nargs='+')
    parser.add_argument("-H", "--hutch", required=False,
                        default=getoutput("get_info --gethutch"),
                        help="name of hutch for camera, "
                        "default is host hutch")
    parser.add_argument("-n", "--num_images", required=False, default=10,
                        help="number of images to take, default is 10",
                        type=int)
    parser.add_argument("-p", "--path", required=True, default='.',
                        help="path to save images in hdf5 file, "
                        "must be in /reg/d/iocData/ or /cds/data/iocData"
                        ", recommend using /reg/d/iocData/{IOC}/hdf5")
    parser.add_argument("-f", "--filename", required=False, default="",
                        help="prefix for name of hdf5 file to store "
                        "images in, camera name and timestamp will be "
                        "appended")
    parser.add_argument("-g", "--gui", action='store_true',
                        help="opens qt window where you take "
                        "images via button press, will append "
                        "timestamp to filename if given")
    parser.add_argument
    args = parser.parse_args()
    # Checking args
    if not os.path.isdir(args.path):
        raise ValueError("path is not directory; must provide a valid path in"
                         " /reg/d/iocData/ or /cds/data/iocData/.")
    if args.path[-1] != '/':
        args.path += '/'
    if args.num_images < 1:
        raise ValueError("num_images must be positive.")
    # Need hutch name to load cameras
    if args.hutch == 'unknown_hutch':
        raise ValueError("Host hutch unknown: must specify "
                         "hutch with --hutch or be on a host"
                         " with a known hutch")
    # Building cameras and appending camera name(s) to filename
    cameras = [load_camera(args.hutch, camera) for camera in args.cam]
    if args.filename:
        args.filename += "-"
    filenames = [args.filename + camera for camera in args.cam]
    if args.gui:
        button_gui(cameras=cameras, num_images=args.num_images,
                   path=args.path, filenames=filenames, hutch=args.hutch,
                   filename_prefix=args.filename)
    else:
        for (camera, filename) in zip(cameras, filenames):
            take_images(camera=camera, num_images=args.num_images,
                        path=args.path, filename=filename)
