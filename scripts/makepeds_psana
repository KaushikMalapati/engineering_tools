#! /bin/bash
usage()
{
cat << EOF
usage: $0 options

Make a pedestal file for offline use

OPTIONS:
        -r|--run         
               runnumber for pedestal
        -e|--experiment <expname> 
               in case you do not want pedestals for the ongoing experiment
        -O|--opal         
               make pedestals for Opals (default only cspad/EPIX detectors)
        -Z|--zyla         
               make pedestals for Zyla (default only cspad/EPIX detectors)
        -R|--Rayonix
               make pedestals for Rayonix (please note that this is not the correct procedure for this detector)
        -j|--jungfrau3     
               make pedestals for Jungfrau - 3 run version(default only cspad/EPIX detectors)
        -q|--queue <queue>
               queue for batch submisson
        -g|--geometry <expname>
                deploy geometry <needs experiment to take geometry from>
        -D|--xtcav_dark
                dark run for XTCAV
        -L|--xtcav_lasingoff
               lasing off run for XTCAV
        -v|--validity_start <val_run>
               validity range (set to <val_run>-end)
        -N|--nevents <#>  
                use this number of events (default 1000). Needed when using -c as original events are counted
        -c|--eventcode <evtcode x> 
                use events with eventcode <x> set
        -n|--noise_max <#> 
                if you have created a noise file, then write pixel mask file for pixels with noise above #sigmas
        -C|--noise_min <#> 
                if noise filecreated, write pixel mask file for pixels with noise below xxx (currently integer only)
        -m|--adu_min <#> 
                write pixel mask file for pixels with pedestal below xxx (currently integer only)
        -x|--adu_max <#>  
                write pixel mask file for pixels with pedestal above xxx )currently integer only)
        -i|--interactive 
                start calibman. -r 0: show all darks, -r n: show runs (n-25) - 25
        -d|--calibdir
                give path for alternative calibdir
        -b|--nbunch
                number of bunches for the laseroff XTCAV calculations
EOF
}

check_running_jobs()
{
    NJOBS=0
    REMJOBIDS=()
    for JOBID in ${JOBIDS[@]}; do
        if  squeue | grep -q $JOBID; then
            REMJOBIDS+=( $JOBID )
            NJOBS=$(($NJOBS+1))
        fi
    done
    if (( $NJOBS == 0 )); then
        echo Nothing running
        JOBIDS=''
    else
        JOBIDS=(${REMJOBIDS[@]})
        echo $NJOBS jobs are still running ${JOBIDS[@]}
    fi
    return $NJOBS
}

xtcav_dark()
{
    if [[ $RUNLOCAL == 1 ]]; then
	python /reg/g/xpp/scripts/xtcav_calibration.py --run $RUN --exp $EXP --dark $ARG
    else
	echo bsub -q $QUEUE -o $WORKDIR/xtcav_dark_RUN${RUN}_%J.out python /reg/g/xpp/scripts/xtcav_calibration.py --run $RUN --exp $EXP --dark $ARG
	SUBMISSION=`bsub -q $QUEUE -o $WORKDIR/xtcav_dark_RUN${RUN}_%J.out python /reg/g/xpp/scripts/xtcav_calibration.py --run $RUN --exp $EXP --dark $ARG`
	echo $SUBMISSION
	JOBNR=`echo $SUBMISSION | awk {'print $2'} | sed s/'<'//g | sed s/'>'//g`
	echo "sleep 20 sec, then start to peek on XTcav dark job "$JOBNR
	sleep 15
	bpeek -f $JOBNR
   fi
   exit
}

xtcav_lasOff()
{
    if [[ $NUMBUNCH != 1 ]] ; then
	ARG=$ARG' -b '$NUMBUNCH
    fi
    if [[ $RUNLOCAL == 1 ]]; then
	mpirun --mca btl ^openib python /reg/g/xpp/scripts/xtcav_calibration.py --run $RUN --exp $EXP --lasoff $ARG
	#python /reg/g/xpp/scripts/xtcav_calibration.py --run $RUN --exp $EXP --lasoff $ARG
	exit
    fi
    SUBMISSION=`bsub -n 8 -q $QUEUE -o $WORKDIR/xtcav_laseroff_RUN${RUN}_%J.out mpirun --mca btl ^openib python /reg/g/xpp/scripts/xtcav_calibration.py --run $RUN --exp $EXP --lasoff $ARG`
    echo $SUBMISSION
    JOBNR=`echo $SUBMISSION | awk {'print $2'} | sed s/'<'//g | sed s/'>'//g`
    echo "start to peek on lasoff job"$JOBNR
    sleep 10
    bpeek -f $JOBNR
    exit
}


POSITIONAL=()
while [[ $# -gt 0 ]]
do
        key="$1"

	case $key in
		-h|--help)
			usage
			exit
			;;
           	-D|--xtcav_dark)
		        XTCAV=1
			shift
			;;
           	-L|--xtcav_lasingoff)
		        XTCAV=2
			shift
			;;
           	-Z|--zyla)
		        WANT_ZYLA=1
			shift
			;;
           	-O|--opal)
                        WANT_OPAL=1
			shift
			;;
           	-R|--rayonix)
		        WANT_RAYONIX=1
			shift
			;;
           	-j|--jungfrau3)
		        OLD_JUNGFRAU=1
			shift
			;;
           	-r|--run)
		        RUN="$2"
                        POSITIONAL+=("$1" "$2")
			shift
			shift
			;;
           	-e|--experiment)
		        EXP="$2"
                        POSITIONAL+=("$1" "$2")
			shift
			shift
			;;
           	-l|--local)
		        RUNLOCAL=1
			shift
			;;
           	-N|--nevents)
		        NUMEVT=("$2")
			shift
			shift
			;;
                -q|--queue)
		        QUEUE=("$2")
			shift
			shift
			;;
                -i|--interactive)
		        INTERACTIVE=1
			shift
			;;
                -c|--eventcode)
		        CALIBCODE=("$2")
			shift
			shift
			;;
                -v|--validity)
		        VALSTR=("$2")
			shift
			shift
			;;
                -g|--geometry)
		        GEOMETRY=("$2")
			shift
			shift
			;;
                -d|--calibdir)
		        CALIBDIR=("$2")
			shift
			shift
			;;
           	-t|--deploy)
		        DEPLOY=0
			shift
			;;
                -n|--noise_max)
		        MYNOISESIGMAX=("$2")
			shift
			shift
			;;
                -C|--noise_min)
		        MYNOISESIGMIN=("$2")
			shift
			shift
			;;
                -m|--adu_min)
		        MYADMIN=("$2")
			shift
			shift
			;;
                -x|--adu_max)
		        MYADMAX=("$2")
			shift
			shift
			;;
                -b|--nbunch)
		        NUMBUNCH=("$2")
			shift
			shift
			;;
                 *)
                        POSITIONAL+=("$1")
			shift
			;;
	esac
done
set -- "${POSITIONAL[@]}"


T="$(date +%s%N)"
echo XXXXXXXXXXXXXXXXX START MAKEPEDS DEV at $(date +"%T") on $HOSTNAME XXXXXXXXXXXXXXXXXXXXXXXXXXXX

RUN=${RUN:=0}
EXP=${EXP:='xxx'}
QUEUE=${QUEUE:='xxx'}
NUMEVT=${NUMEVT:=1000}
XTCAV=${XTCAV:=0}
INTERACTIVE=${INTERACTIVE:=0}
CALIBCODE=${CALIBCODE:=0}
VALSTR=${VALSTR:='xxx'}
CALIBDIR=${CALIBDIR:='xxx'}
DEPLOY=${DEPLOY:=1}
MYNOISESIGMIN=${MYNOISESIGMIN:=-1}
MYNOISESIGMAX=${MYNOISESIGMAX:=-1}
MYADUMIN=${MYADUMIN:=-1}
MYADUMAX=${MYADUMAX:=-1}
NUMBUNCH=${NUMBUNCH:=1}

if [ $RUN == 0 ]; then
    if [ $INTERACTIVE -ne 1 ]; then
	printf "Please enter a run number HERE: \n"; read RUN
    fi
fi

if [ $EXP == 'xxx' ]; then
    echo 'no experiment passed!!!'
    HUTCH=`/reg/g/pcds/engineering_tools/latest-released/scripts/get_info --gethutch`
    echo HUTCH $HUTCH
    if [[ $HUTCH != 'unknown_hutch' ]]; then
        EXP=`/reg/g/pcds/engineering_tools/latest-released/scripts/get_info --exp --hutch $HUTCH`
    fi
else
    HUTCH=${EXP:0:3}
fi

if [[ $EXP == 'xxx' ]]; then
    printf "Please enter an experiment name HERE: \n"; read EXP
fi

# set the umask so all the files create are group writeable
#umask 002
source /reg/g/psdm/etc/psconda.sh
#conda activate ana-4.0.17 #ana-4.0.19 is broken for the 2M

#if you don't pass the queue, it'll run interactively 
if [[ $QUEUE == 'xxx' ]]; then
    RUNLOCAL=1
fi

#(hopefully) effectively turn off relative cuts for status bits. Defaults to 6. used in calibrun
ARG=' -n '$NUMEVT' -Z 1000000 -U 1000000 -z 1000000 -u 1000000 '

###########
# setup work directory - always!
###########
if [ $CALIBDIR != 'xxx' ]; then
    ARG=$ARG' -c '$CALIBDIR
    JFARG=' -C '$CALIBDIR
else
    JFARG=''
    CALIBDIR=/reg/d/psdm/${HUTCH}/$EXP/calib/
    if [[ $HOSTNAME =~ "drp-srcf" ]]; then
        CALIBDIR=/cds/data/drpsrcf/${HUTCH}/$EXP/calib/
    fi
fi
WORKDIR=$CALIBDIR/pedestal_workdir
if [ ! -d $WORKDIR ]; then
    if [ -d $CALIBDIR ]; then
	mkdir -p $WORKDIR
	if [ ! -d $WORKDIR ]; then
	    #inexp=`groups | grep $EXP | wc -l`
	    #inhutch=`groups | grep ps-$HUTCH | wc -l`
	    #if [[ ( $inexp -gt 0 ) ||  ( $inhutch -gt 1 )]]; then
	    echo 'Cannot create typical directory to store calib logfiles & results is not writeable, will attempt to work from /tmp, but things may fail'
            $WORKDIR = '/tmp'
	fi
	#else
	#    echo 'not member of experiment '$EXP' of ps-'$HUTCH' group, QUIT!'
	#fi
    else
	echo 'experiments directory '$DIR' does not exist, quit'
	exit
    fi
fi
if [ ! -w $WORKDIR ]; then
    echo 'Typical directory to store calib logfiles & results is not writeable, will attempt to work from /tmp, but things may fail'
    $WORKDIR = '/tmp'
fi 
cd $WORKDIR

######################
# work on the XTCAV
######################

if [ $XTCAV == 1 ]; then
    xtcav_dark
fi
if [ $XTCAV == 2 ]; then
    xtcav_lasOff
fi
######################
# endXTCAV - both functions will call exit!
######################

###########
# few generic parameters
###########
if [ $INTERACTIVE == 1 ]; then
    echo 'now calling calibman (GUI) - switch to old release for now'
    source /reg/g/psdm/etc/psconda.sh.old
    calibman
    exit
fi

if [ $CALIBCODE -ne 0 ]; then
    if [ $NUMEVT -le 1000 ]; then
	NUMEVT=10000
    fi
    ARG=$ARG' -f '$CALIBCODE
fi

###
# calibrun can't submit to SLURM quite yet
###
#if [ $RUNLOCAL -ne 1 ]; then
#    ARG=$ARG' -q '$QUEUE
#fi

if [ $DEPLOY == 1 ]; then
    ARG=$ARG' -D '
fi


CREATE_TIME=`date '+%m_%d_%Y_%H:%M:%S'`
printf -v RUNSTR "%04g" $RUN

if [[ $HOSTNAME =~ "drp-srcf" ]]; then
    echo check FFB files: 
    ls -ltr /cds/data/drpsrcf/$HUTCH/$EXP/xtc/*r$RUNSTR*s*xtc*
    detnames exp=${EXP}:run=${RUN}:dir=/cds/data/drpsrcf/$HUTCH/$EXP/xtc:stream=0-79 > /tmp/detnames_$EXP\_$CREATE_TIME
else
    echo Process files: 
    ls -ltr /reg/d/psdm/$HUTCH/$EXP/xtc/*r*$RUNSTR*s*xtc*
    detnames exp=${EXP}:run=${RUN}:stream=0-79 > /tmp/detnames_$EXP\_$CREATE_TIME
fi
#running local
echo -----------------------
echo 'XTC files contain:'
cat /tmp/detnames_$EXP\_$CREATE_TIME
echo -----------------------

####
# Jungfrau related stuff. Different executable w/ different options. Ack.
###
#check if jungfrau detectors are present
HAVE_JUNGFRAU=`grep Jungfrau /tmp/detnames_$EXP\_$CREATE_TIME | wc -l`
#HAVE_JUNGFRAU=`detnames exp=${EXP}:run=${RUN} | grep Jungfrau | wc -l`
if [[ ( $HAVE_JUNGFRAU -ge 1 ) && ( $WANT_ZYLA -eq 0 ) && ( $WANT_OPAL -eq 0 )  && ( $WANT_RAYONIX -eq 0 ) ]]; then
    
    DETNAMES=`grep Jungfrau /tmp/detnames_$EXP\_$CREATE_TIME | awk  'BEGIN { FS = "|"}; {print $1}' | paste -d " " -s`
    if [ -v GEOMETRY ]; then
	GEODIR=`echo /reg/d/psdm/${GEOMETRY:0:3}/$GEOMETRY/calib/`
	SUBDIR=`ls $GEODIR | grep Jungfrau | grep -v workdir`
	DORGNAME=`ls $GEODIR/$SUBDIR | grep Jungfrau `
	for JUNGFRAU in $DETNAMES; do
	    DNAME=`grep $JUNGFRAU /tmp/detnames_$EXP\_$CREATE_TIME | awk  'BEGIN { FS = "|"}; {print $1}' | xargs`
	    #get the latest geometry file deployed
            ORGFILE='0-end.data'
            if test -f $GEODIR/$SUBDIR/$DORGNAME/geometry/HISTORY; then
    	        ORGFILE=`tail -n 1 $GEODIR/$SUBDIR/$DORGNAME/geometry/HISTORY | awk {'print$1'} | sed s/'file:'//`
	    fi
	    CMD=`echo calibfile deploy -t geometry -e $EXP -r 0-end -s $DNAME -f $GEODIR/$SUBDIR/$DORGNAME/geometry/$ORGFILE`
            echo $CMD
	    $CMD
	    
            echo 'Deploy the other jungfrau gain constants'
	    jungfrau_gain_constants -d exp=${EXP}:run=${RUN} -D
	    echo 'Deployed the other jungfrau gain constants'
 	done
	exit
    fi

    DSNAME='exp='$EXP':run='$RUN':smd:stream=0-79'
    if [ -v OLD_JUNGFRAU ]; then
	#get the dataset name
	let RUN1=RUN+1
	let RUN2=RUN+2
	DSNAME='exp='$EXP':run='$RUN','$RUN1','$RUN2':smd:stream=0-79'
    fi
    if [[ $HOSTNAME =~ "drp-srcf" ]]; then
	DSNAME=$DSNAME':dir=/cds/data/drpsrcf/'$HUTCH'/'$EXP'/xtc/'
    fi   

    #default arguments.
    JFARG=' -d '$DSNAME' -n '$NUMEVT
    if [[ $DEPLOY == 1 ]]; then
        JFARG=$JFARG' -u '
    fi

    #specify parameters for status bits in pixel mask
    ADUMAX=16000
    ADUMIN=1
    NOISESIGMAX=16000
    NOISESIGMIN=0.001
    #NOISESIGMIN=1 #my script cannot deal with floats
    if [[ $MYNOISESIGMIN -ne -1 ]]; then
	      NOISESIGMIN=$MYNOISESIGMIN
    fi
    if [[ $MYNOISESIGMAX -ne -1 ]]; then
	      NOISESIGMAx=$MYNOISESIGMAX
    fi
    if [[ $MYADUMIN -ne -1 ]]; then
	      ADUMIN=$MYADUMIN
    fi
    if [[ $MYADUMAX -ne -1 ]]; then
	      ADUMAX=$MYADUMAX
    fi
    JFARG=$JFARG' --int_lo='$ADUMIN' --int_hi='$ADUMAX' --rms_lo='$NOISESIGMIN' --rms_hi='$NOISESIGMAX

    echo -------------------- START JUNGFRAU PEDESTALS at $(date +"%T") ----------------------------

    if [[ $RUNLOCAL != 1 ]]; then
        JOBIDS=()
        NJOBS=0
    fi
 
    for JUNGFRAU in $DETNAMES; do
	echo jungfrau loop $JUNGFRAU  -- $RUNLOCAL
        CMD=`echo jungfrau_dark_proc $JFARG -s $JUNGFRAU`
        #now finally call the command
   	for calibcycle in {0..2}; do
            if [ -v OLD_JUNGFRAU ]; then
                CMDC=$CMD
            else
                CMDC=$CMD' --stepnum '$calibcycle
	    fi
            if [[ $RUNLOCAL != 1 ]]; then
                tmpScript=$(mktemp -p $WORKDIR jungfrau_multi_tmpXXXXX.sh)
                #trap "rm -f $tmpScript" EXIT
                chmod u+x $tmpScript
                printf '#!/bin/bash\nsource /cds/sw/ds/ana/conda1/manage/bin/psconda.sh\n' > $tmpScript
                printf '%s\n' "${CMDC}" >> $tmpScript
                jfCmd=`echo sbatch --exclusive -p $QUEUE -o $WORKDIR/jungfrau_${EXP}_RUN${RUN}_%J.out $tmpScript`
                echo 'run in queue: ' $jfCmd
                SUBMISSION=`$jfCmd`
                echo $SUBMISSION
                THISJOBID=`echo $SUBMISSION | awk {'print $4'}`
                JOBIDS+=( $THISJOBID )
                NJOBS=$(($NJOBS+1))
	    else
                echo $CMDC
                $CMDC
            fi
            if [ -v OLD_JUNGFRAU ]; then
       	        break
	    fi
        done
	ALLJOBIDS=${JOBIDS[@]}
    done

    if [[ $RUNLOCAL != 1 ]]; then
	echo 'Wait for 1/2 minutes before checking jobs:'
        sleep 30
        echo Running $NJOBS jobs are PIDS: ${JOBIDS[@]}
        until check_running_jobs; do
                echo 'Checking again in 10s'
                sleep 10
            done
        echo 'All jobs finished'
	# and now check that none of the jobs have existed with an error code:
	NFAILEDJOBS=0
	for JOBID in ${ALLJOBIDS[@]}; do
	    echo 'Checking job '$JOBID
	    if grep -q 'exit code' $WORKDIR/*$JOBID.out; then
		NFAILEDJOBS=$(($NFAILEDJOBS+1))
	    fi
	done
    fi

    #Now deploy.
    if [ $DEPLOY == 1 ]; then
	if [ $NFAILEDJOBS -gt 0 ]; then
	    read -p "$NFAILEDJOBS of the calibration tasks failed, do you want to quit here (y/n)"
	    if [ "$REPLY" != "y" ];then
		exit 1
	    fi
	fi
        for JUNGFRAU in $DETNAMES; do
	    #this is also where -t should be used, just as for the validity range
            CMD=`echo jungfrau_deploy_constants -D -d $JUNGFRAU -e $EXP -r $RUN`
            if [ $VALSTR != 'xxx' ]; then
	       # this does not work before ana-.....	
               #CMD=$CMD' -t '$VALSTR'-end'
               CMD=$CMD' -t '$VALSTR
            fi
            if [[ $HOSTNAME =~ "drp-srcf" ]]; then
	        CMD=$CMD' -x /cds/data/drpsrcf/'$HUTCH'/'$EXP'/xtc/'
            fi   

            echo $CMD
            $CMD
        done
    fi

    ls -l /reg/d/psdm/${EXP:0:3}/$EXP/calib/J*/*/pedestals/*$RUN*data
    echo -------------------- END JUNGFRAU PEDESTALS at $(date +"%T") ----------------------------
fi

####
# epix10k related stuff. Different executable w/ different options. Ack.
###
#check if epix10k detectors are present
HAVE_EPIX10K=`grep Epix10ka /tmp/detnames_$EXP\_$CREATE_TIME | wc -l`
if [[ ( $HAVE_EPIX10K -ge 1 ) && ( $WANT_ZYLA -eq 0 ) && ( $WANT_OPAL -eq 0 )  && ( $WANT_RAYONIX -eq 0 ) ]]; then
    echo -------------------- START EPIX10K PEDESTALS at $(date +"%T") ----------------------------
    DETNAMES=`grep Epix10ka /tmp/detnames_$EXP\_$CREATE_TIME | awk  'BEGIN { FS = "|"}; {print $2}' | paste -d " " -s`
    if [[ $RUNLOCAL -ne 1 ]]; then
        JOBIDS=()
        NJOBS=0
    fi
    if [ -v GEOMETRY ]; then
	echo 'doing geometry.....DEBUG'
	GEODIR=`echo /reg/d/psdm/${GEOMETRY:0:3}/$GEOMETRY/calib/`
	for EPIX10K in $DETNAMES; do
	    if ! [[ $EPIX10K =~ "2M" ]]; then
		continue
	    fi
   	    SUBDIR=`ls $GEODIR | grep Epix10ka2M`
	    DNAME=`grep $EPIX10K /tmp/detnames_$EXP\_$CREATE_TIME | awk  'BEGIN { FS = "|"}; {print $1}' | xargs`
	    #get the latest geometry file deployed
            ORGFILE='0-end.data'
            if test -f $GEODIR$SUBDIR/$DNAME/geometry/HISTORY; then
    	        ORGFILE=`tail -n 1 $GEODIR/$SUBDIR/$DNAME/geometry/HISTORY | awk {'print$1'} | sed s/'file:'//`
	    fi
	    CMD=`echo calibfile deploy -t geometry -e $EXP -r 0-end -s $DNAME -f $GEODIR$SUBDIR/$DNAME/geometry/$ORGFILE`
            echo $CMD
	    $CMD
	done
	#this is so ugly - a second loop for the quad.
	for EPIX10K in $DETNAMES; do
	    if ! [[ $EPIX10K =~ "Quad" ]]; then
		continue
	    fi
   	    SUBDIR=`ls $GEODIR | grep Epix10kaQuad`
	    DNAME=`grep $EPIX10K /tmp/detnames_$EXP\_$CREATE_TIME | awk  'BEGIN { FS = "|"}; {print $1}' | xargs`
	    #get the latest geometry file deployed
            ORGFILE='0-end.data'
            if test -f $GEODIR$SUBDIR/$DNAME/geometry/HISTORY; then
    	        ORGFILE=`tail -n 1 $GEODIR/$SUBDIR/$DNAME/geometry/HISTORY | awk {'print$1'} | sed s/'file:'//`
	    fi
	    CMD=`echo calibfile deploy -t geometry -e $EXP -r 0-end -s $DNAME -f $GEODIR$SUBDIR/$DNAME/geometry/$ORGFILE`
            echo $CMD
	    $CMD
	done
	exit
    fi
    for EPIX10K in $DETNAMES; do
        echo Epix10ka name for $EXP is: $EPIX10K
        ##run all at once - do not use
	#Do not use workdir as you'd need to run the full charge injection run there for this to work
	#revisit when we run into permission problems.

	for calibcycle in {0..4}; do
            if [[ $HOSTNAME =~ "drp-srcf" ]]; then
		CMD=`echo epix10ka_pedestals_calibration -d $EPIX10K -e $EXP -r $RUN -c $calibcycle -x /cds/data/drpsrcf/$HUTCH/$EXP/xtc/:live:stream=0-79`
	    else 
		CMD=`echo epix10ka_pedestals_calibration -d $EPIX10K -e $EXP -r $RUN -c $calibcycle`
	    fi
    	    echo ---------------EPIX10K PEDESTALS FOR CYCLE $calibcycle --------------------
            if [[ $RUNLOCAL != 1 ]]; then
                tmpScript=$(mktemp -p $WORKDIR epix10ka_pedestals_tmpXXXXX.sh)
                #trap "rm -f $tmpScript" EXIT
                chmod u+x $tmpScript
                printf '#!/bin/bash\nsource /cds/sw/ds/ana/conda1/manage/bin/psconda.sh\n' > $tmpScript
                printf '%s\n' "${CMD}" >> $tmpScript
                ep10kaCmd=`echo sbatch --exclusive -p $QUEUE -o $WORKDIR/${EPIX10K}_${EXP}_Run${RUN}_cycle${calibcycle}_%J.out $tmpScript`
                echo 'run in queue: ' $ep10kaCmd
                SUBMISSION=`$ep10kaCmd`
                echo $SUBMISSION
                THISJOBID=`echo $SUBMISSION | awk {'print $4'}`
                JOBIDS+=( $THISJOBID )
                NJOBS=$(($NJOBS+1))
            else            
                echo $CMD
                $CMD
            fi
        done
	ALLJOBIDS=${JOBIDS[@]}
    done
    if [[ $RUNLOCAL != 1 ]]; then
	echo 'Wait for 1 1/2 minutes before checking jobs:'
        sleep 90
        echo Running $NJOBS jobs are PIDS: ${JOBIDS[@]}
        until check_running_jobs; do
                echo 'Checking again in 10s'
                sleep 10
            done
        echo 'All jobs finished'
	# and now check that none of the jobs have existed with an error code:
	NFAILEDJOBS=0
	for JOBID in ${ALLJOBIDS[@]}; do
	    echo 'Checking job '$JOBID
	    if grep -q 'exit code' $WORKDIR/*$JOBID.out; then
		NFAILEDJOBS=$(($NFAILEDJOBS+1))
	    fi
	done
	
    fi

    echo ---------------EPIX10K PEDESTALS CALCULATED NOW DEPLOY     --------------------
    if [ $DEPLOY == 1 ]; then
	if [ $NFAILEDJOBS -gt 0 ]; then
	    read -p "$NFAILEDJOBS of the calibration tasks failed, do you want to quit here (y/n)"
	    if [ "$REPLY" != "y" ];then
		exit 1
	    fi
	fi


        for EPIX10K in $DETNAMES; do
            CMD=`echo epix10ka_deploy_constants -D -d $EPIX10K -e $EXP -r $RUN`
	    echo 'setting validity....' $VALSTR
            if [ $VALSTR != 'xxx' ]; then
                CMD=$CMD' -t '$VALSTR
            fi
            if [[ $HOSTNAME =~ "drp-srcf" ]]; then
                CMD=$CMD' -x /cds/data/drpsrcf/'$HUTCH'/'$EXP'/xtc/:stream=0-79'
	    fi
            echo $CMD
            $CMD
        done
        if [[ $RUNLOCAL != 1 ]]; then
    	    echo 'Print Information about batch jobs'
	    JOBIDSTR=''
    	    for JOBID in ${ALLJOBIDS[@]}; do
		if [[ $JOBIDSTR != '' ]]; then 
 		    JOBIDSTR=$JOBIDSTR','
		fi
		JOBIDSTR=$JOBIDSTR$JOBID
	    done
	    sacct -j $JOBIDSTR --format=JobID,AveCPU,AveVMSize,CPUTime,Start,End,Elapsed
        fi
    fi
    echo -------------------- STOP EPIX10K PEDESTALS at $(date +"%T") ----------------------------
fi

###########
# Make list of detectors to treat with calibrun
###########

#check if detectors are present    
HAVE_EPIX=`grep Epix100 /tmp/detnames_$EXP\_$CREATE_TIME | wc -l`
HAVE_CSPAD=`grep Cspad /tmp/detnames_$EXP\_$CREATE_TIME | wc -l`
HAVE_ZYLA=`grep Zyla /tmp/detnames_$EXP\_$CREATE_TIME | wc -l`
HAVE_ISTAR=`grep iStar /tmp/detnames_$EXP\_$CREATE_TIME | wc -l`
HAVE_OPAL=`grep Opal /tmp/detnames_$EXP\_$CREATE_TIME | wc -l`
HAVE_RAYONIX=`grep Rayonix /tmp/detnames_$EXP\_$CREATE_TIME | wc -l`

#not like this: calculation
let SPECIFIED_CUTS=MYNOISESIGMIN+MYNOISESIGMAX+MYADUMIN+MYADUMAX

DETS=''
#always make pedestals if detectors are present in data
if [[ ( $HAVE_CSPAD -ge 1) ]]; then
    DETS=`echo $DETS ' CSPAD,CSPAD2x2'`
	
fi
if [[ ( $HAVE_EPIX -ge 1) ]]; then
    DETS=`echo $DETS ' Epix100a'`
fi

#add Zyla only on request
if [[ ( $HAVE_ZYLA -ge 1 ) && ( $WANT_ZYLA -ge 1 ) ]]; then
    if [ $SPECIFIED_CUTS -eq -4 ]; then
	DETS=`echo $DETS' Zyla'`
    else
	DETS='Zyla'
    fi
fi
#add iStar only on request
if [[ ( $HAVE_ISTAR -ge 1 ) && ( $WANT_ZYLA -ge 1 ) ]]; then
    if [ $SPECIFIED_CUTS -eq -4 ]; then
	DETS=`echo $DETS' iStar'`
    else
	DETS='iStar'
    fi
fi

#add Opal only on request
if [[ ( $HAVE_OPAL -ge 1 ) && ( $WANT_OPAL -ge 1 ) ]]; then
    if [ $SPECIFIED_CUTS -eq -4 ]; then
	DETS=`echo $DETS' Opal1000,Opal2000,Opal4000,Opal8000'`
    else
	DETS='Opal1000,Opal2000,Opal4000,Opal8000'
    fi
fi

#add Rayonix only on request
if [[ ( $HAVE_RAYONIX -ge 1 ) && ( $WANT_RAYONIX -ge 1 ) ]]; then
    if [ $SPECIFIED_CUTS -eq -4 ]; then
	DETS=`echo $DETS' Rayonix'`
    else
	DETS='Rayonix'	
    fi
    ARG=$ARG' --zeropeds'
    #not sure if deplotgeo needs -P -D....
    if [ -v GEOMETRY ]; then
	calibrun -r $RUN -e $EXP -d $DETS --deploygeo -P -D
	exit
    fi
fi

if [[ ( $DETS == '' ) ]]; then
    T2="$(($(date +%s%N)-T))"
    S="$((T2/1000000000))"
    MIN="$((S/60))"
    SEC="$((S-MIN*60))"
    echo XXXX NO epix100/cspad/opal/... IN RUN $RUN - END MAKEPEDS at $(date +"%T") after  $MIN.$SEC XXXXXXXXXXXXXXXXX
    exit
fi

echo 'now calling calibrun from host ' $HOSTNAME ' from directory '
echo 'in: ' `pwd` ' running: ' `which calibrun` ' on ' `hostname`
echo 'for the following detectors: ' $DETS

for MYDET in $DETS; do
    #set thresholds for the detector in question
    #ADU minimum, maximum
    if [[ ( $MYDET == 'Zyla') ]]; then
	ADUMAX=10000
	ADUMIN=1        
	NOISESIGMAX=100  
	NOISESIGMIN=1
    elif [[ ( $MYDET == 'iStar') ]]; then
	ADUMAX=10000
	ADUMIN=1        
	NOISESIGMAX=100  
	NOISESIGMIN=1
    elif [[ ( $MYDET == 'Opal') ]]; then
	ADUMAX=10000
	ADUMIN=1        
	NOISESIGMAX=100  
	NOISESIGMIN=1
    elif [[ ( $MYDET == 'Rayonix') ]]; then
	ADUMAX=16000
	ADUMIN=1        
	NOISESIGMAX=10000  
	NOISESIGMIN=0
    elif [[ ( $MYDET == 'Epix100a') ]]; then
	ADUMAX=10000
	ADUMIN=10
	NOISESIGMAX=7. #too loose? But this has been used.
	NOISESIGMIN=1.5
    else #CsPad cuts.
	ADUMAX=10000
	ADUMIN=10
	NOISESIGMAX=7.
	NOISESIGMIN=2.
    fi
    #overwrite if argument is passed
    if [ $MYNOISESIGMIN -ne -1 ]; then
	NOISESIGMIN=$MYNOISESIGMIN
    fi
    if [ $MYNOISESIGMAX -ne -1 ]; then
	NOISESIGMAX=$MYNOISESIGMAX
    fi
    if [ $MYADUMIN -ne -1 ]; then
	ADUMIN=$MYADUMIN
    fi
    if [ $MYADUMAX -ne -1 ]; then
	ADUMAX=$MYADUMAX
    fi

    LOCARG=$ARG' --thr_int_min '$ADUMIN' --thr_int_max '$ADUMAX' --thr_rms_min '$NOISESIGMIN' --thr_rms '$NOISESIGMAX
    #this was likely to work with runs where the zyla rate was < readout rate....
    if [[ ( $MYDET == 'Zyla') ]]; then
	LOCARG=$LOCARG' -m 100'
    fi

    if [ $VALSTR != 'xxx' ]; then
        LOCARG=$LOCARG' -v '$VALSTR'-end'
    fi

    echo -------------------- START CALIBRUN at $(date +"%T") for detector $MYDET----------------------------
    source /reg/g/psdm/etc/psconda.sh
    if [[ $HOSTNAME =~ "drp-srcf" ]]; then
    	cmd=`echo calibrun -r $RUN  -d $MYDET -P -e $EXP -x /cds/data/drpsrcf/$HUTCH/$EXP/xtc/ $LOCARG`
    	echo $cmd
    	$cmd
    else
    	cmd=`echo calibrun -r $RUN  -d $MYDET -P -e $EXP -m 10 $LOCARG`
    	echo $cmd
    	$cmd
    fi
    echo -------------------- END CALIBRUN at $(date +"%T") for detector $MYDET----------------------------
done
rm /tmp/detnames_$EXP\_$CREATE_TIME
T2="$(($(date +%s%N)-T))"
S="$((T2/1000000000))"
M="$((T2/1000000))"
echo xxxxxxxxxxxxxxxxxxxx END MAKEPEDS at $(date +"%T") after  '$S'.'$M' XXXXXXXXXXXXXXXXXXXXXXXXXXXX
