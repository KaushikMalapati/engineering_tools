#!/usr/bin/env python
"""
Sets up a pyps/apps deployment for a particular github python package.

This will create an executable under
.../pyps/apps/<app-name>/<release>/<app-name>
and repoint the symbolic link at
.../pyps/apps/<app-name>/latest
to the new release folder.
"""
import argparse
import os
import subprocess

CONDA_BASE = '/reg/g/pcds/pyps/conda/py36'
APPS_BASE = '/reg/g/pcds/pyps/apps'

# Some basic py2/py3 compat for this standalone script
try:
    input = raw_input  # NOQA
except NameError:
    pass


def launcher_lines(conda_setup_path, conda_env, launcher,
                   pythonpath=''):
    """
    Return the lines needed for a launcher script
    """
    lines = []
    lines.append('#!/usr/bin/env bash\n')
    lines.append('unset PYTHONPATH\n')
    lines.append('unset LD_LIBRARY_PATH\n')
    lines.append('source {}\n'.format(conda_setup_path))
    lines.append('conda activate {}\n'.format(conda_env))
    if pythonpath:
        lines.append('export PYTHONPATH="{}:$PYTHONPATH"\n'.format(pythonpath))
    lines.append(launcher + ' $@\n')
    return lines


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('app', help='Name of the app to deploy')
    parser.add_argument('-r', '--release', help='App version',
                        required=True)
    parser.add_argument('-c', '--conda', help='Conda environment name',
                        required=True)
    parser.add_argument('--repo',
                        help=('Clone this repo and mask the environment '
                              'package. Use this when you have only a '
                              'small change that does not need a full '
                              'environment release.'))
    parser.add_argument('--app-bin', default='bin',
                        help=('Use in conjunction with --repo arg when the '
                              'launcher is not in the bin directory'))
    args = parser.parse_args()

    # Check the environment
    conda_setup = CONDA_BASE + '/etc/profile.d/conda.sh'
    if not os.path.exists(conda_setup):
        print('No conda activate script at {}, aborting'.format(conda_setup))
        return
    conda_env = CONDA_BASE + '/envs/' + args.conda
    if not os.path.exists(conda_env):
        print('No conda env at {}, aborting'.format(conda_env))
        return

    # Check our landing area
    if os.path.exists(APPS_BASE):
        app_folder = APPS_BASE + '/' + args.app
        # Protect against typos
        if not os.path.exists(app_folder):
            prompt = 'App folder {} does not exist. Create it now? (y/n)\n> '
            ok = input(prompt.format(app_folder))
            if ok != 'y':
                print('Aborting')
                return
        release_dir = app_folder + '/' + args.release
        os.makedirs(release_dir)
        os.chdir(release_dir)
        print('Installing launch script...')
        # Split here if we were given a repo
        if args.repo:
            # We need to clone it in
            subprocess.call(['git', 'clone', '-b', args.release,
                             'https://github.com/' + args.repo,
                             args.app + '_repo'])
            # Set up the modified launcher
            raw_launcher = subprocess.check_output(['readlink', '-f',
                                                    args.app + '_repo' + '/' +
                                                    args.app_bin + '/' +
                                                    args.app])
            pythonpath = subprocess.check_output(['readlink', '-f',
                                                  args.app + '_repo'])
            lines = launcher_lines(conda_setup, args.conda,
                                   raw_launcher.strip('\n'),
                                   pythonpath=pythonpath.strip('\n'))
        else:
            # We only need to set up the launcher
            lines = launcher_lines(conda_setup, args.conda, args.app)
        with open(args.app, 'w') as fd:
            fd.writelines(lines)
        st = os.stat(args.app)
        os.chmod(args.app, st.st_mode | 0o111)
        os.chdir(app_folder)
        print('Write-protecting the release...')
        subprocess.call(['chmod', '-R', 'a-w', args.release])
        print('Repointing the "latest" sym link...')
        if os.path.exists('latest'):
            os.remove('latest')
        os.symlink(args.release, 'latest')
        print('pyps-deploy completed')
    else:
        print('{} does not exist, aborting'.format(APPS_BASE))
        return


if __name__ == '__main__':
    main()
